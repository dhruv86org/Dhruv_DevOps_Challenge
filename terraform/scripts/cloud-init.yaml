#cloud-config
package_update: true
package_upgrade: true

packages:
  - nginx
  - azure-cli
  - curl
  - logrotate

write_files:
  - path: /etc/nginx/nginx.conf
    content: |
      user www-data;
      worker_processes auto;
      pid /run/nginx.pid;
      include /etc/nginx/modules-enabled/*.conf;

      events {
          worker_connections 768;
      }

      http {
          ##
          # Basic Settings
          ##
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          types_hash_max_size 2048;
          server_tokens off;

          include /etc/nginx/mime.types;
          default_type application/octet-stream;

          ##
          # Logging Settings
          ##
          
          # Define custom log formats
          log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for"';
          
          log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                             '$status $body_bytes_sent "$http_referer" '
                             '"$http_user_agent" "$http_x_forwarded_for" '
                             'rt=$request_time uct="$upstream_connect_time" '
                             'uht="$upstream_header_time" urt="$upstream_response_time"';

          # Access log configuration
          access_log /var/log/nginx/access.log main;
          
          # Error log configuration
          error_log /var/log/nginx/error.log warn;

          ##
          # Gzip Settings
          ##
          gzip on;
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_types
              text/plain
              text/css
              text/xml
              text/javascript
              application/json
              application/javascript
              application/xml+rss
              application/atom+xml
              image/svg+xml;

          ##
          # Virtual Host Configs
          ##
          include /etc/nginx/conf.d/*.conf;
          include /etc/nginx/sites-enabled/*;
      }

  - path: /etc/nginx/sites-available/default
    content: |
      server {
          listen 80 default_server;
          listen [::]:80 default_server;
          
          # Custom access log for HTTP requests (redirects)
          access_log /var/log/nginx/http_access.log main;
          error_log /var/log/nginx/http_error.log warn;
          
          # Redirect HTTP to HTTPS
          location / {
              return 301 https://$host$request_uri;
          }
      }
      
      server {
          listen 443 ssl default_server;
          listen [::]:443 ssl default_server;
          
          # Custom access and error logs for HTTPS
          access_log /var/log/nginx/https_access.log detailed;
          error_log /var/log/nginx/https_error.log warn;
          
          # Self-signed SSL certificate
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          
          # SSL configuration
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256;
          ssl_prefer_server_ciphers off;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 10m;
          
          root /var/www/html;
          index index.html;
          
          # Main location block
          location / {
              try_files $uri $uri/ =404;
              
              # Security headers - moved inside location block
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              # Log successful requests
              access_log /var/log/nginx/app_access.log main;
          }
          
          # Health check endpoint
          location /health {
              # Disable access logging for health checks to reduce noise
              access_log off;
              
              # But log errors for health endpoint
              error_log /var/log/nginx/health_error.log warn;
              
              # Security headers for health endpoint
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header Content-Type "text/plain" always;
              
              return 200 "healthy\n";
          }
          
          # Status monitoring endpoint
          location /status {
              access_log /var/log/nginx/status_access.log detailed;
              
              # Security headers for status endpoint
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header Content-Type "text/plain" always;
              
              return 200 "status: ok\nserver: $server_name\ntime: $time_local\n";
          }
      }

  - path: /etc/logrotate.d/nginx-custom
    content: |
      /var/log/nginx/*.log {
          daily
          missingok
          rotate 30
          compress
          delaycompress
          notifempty
          create 0644 www-data adm
          sharedscripts
          prerotate
              if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
                  run-parts /etc/logrotate.d/httpd-prerotate; \
              fi \
          endscript
          postrotate
              invoke-rc.d nginx rotate >/dev/null 2>&1
          endscript
      }

  - path: /usr/local/bin/setup-nginx.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "=== Starting nginx setup ==="
      
      # Wait for package installation to complete
      echo "Waiting for nginx installation..."
      timeout=60
      counter=0
      while ! command -v nginx &> /dev/null; do
          if [ $counter -ge $timeout ]; then
              echo "ERROR: Nginx installation timeout"
              exit 1
          fi
          echo "Waiting for nginx installation to complete... ($counter/$timeout)"
          sleep 5
          counter=$((counter + 5))
      done
      
      echo "✅ Nginx found, proceeding with configuration..."
      
      # Stop nginx if it's running
      systemctl stop nginx || true
      
      # Create necessary directories
      echo "Creating directories..."
      mkdir -p /var/log/nginx
      mkdir -p /var/www/html
      mkdir -p /etc/ssl/private
      mkdir -p /etc/ssl/certs
      
      # Set proper permissions for directories
      chown -R www-data:adm /var/log/nginx
      chmod -R 755 /var/log/nginx
      chown -R www-data:www-data /var/www/html
      chmod -R 755 /var/www/html
      
      # Generate self-signed SSL certificate
      echo "Generating SSL certificate..."
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout /etc/ssl/private/nginx-selfsigned.key \
          -out /etc/ssl/certs/nginx-selfsigned.crt \
          -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost" \
          -batch
      
      # Set proper SSL certificate permissions
      chmod 600 /etc/ssl/private/nginx-selfsigned.key
      chmod 644 /etc/ssl/certs/nginx-selfsigned.crt
      chown root:root /etc/ssl/private/nginx-selfsigned.key
      chown root:root /etc/ssl/certs/nginx-selfsigned.crt
      
      echo "✅ SSL certificates created"
      
      # Download web content from storage with retry logic
      echo "Downloading web content..."
      for i in {1..5}; do
          if az storage blob download \
              --account-name ${storage_account_name} \
              --account-key ${storage_account_key} \
              --container-name web-content \
              --name index.html \
              --file /var/www/html/index.html \
              --overwrite; then
              echo "✅ Web content downloaded successfully"
              break
          else
              echo "⚠️ Attempt $i failed, retrying in 10 seconds..."
              if [ $i -eq 5 ]; then
                  echo "❌ Failed to download web content after 5 attempts"
                  # Create a fallback index.html
                  cat > /var/www/html/index.html << 'EOF'
      <!DOCTYPE html>
      <html>
      <head><title>Hello World</title></head>
      <body><h1>Hello World</h1><p>Fallback content - storage download failed</p></body>
      </html>
      EOF
                  echo "✅ Created fallback web content"
              else
                  sleep 10
              fi
          fi
      done
      
      # Set proper permissions for web content
      chown -R www-data:www-data /var/www/html
      chmod -R 644 /var/www/html/*
      chmod 755 /var/www/html
      
      # Remove default nginx site if it exists
      rm -f /etc/nginx/sites-enabled/default
      
      # Enable our site
      ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
      
      # Test nginx configuration
      echo "Testing nginx configuration..."
      if nginx -t; then
          echo "✅ Nginx configuration is valid"
      else
          echo "❌ Nginx configuration test failed!"
          echo "Configuration details:"
          nginx -T
          exit 1
      fi
      
      # Enable and start nginx
      echo "Starting nginx..."
      systemctl enable nginx
      
      # Start nginx with detailed error reporting
      if systemctl start nginx; then
          echo "✅ Nginx started successfully"
      else
          echo "❌ Failed to start nginx"
          echo "Nginx status:"
          systemctl status nginx --no-pager -l
          echo "Nginx error log:"
          tail -20 /var/log/nginx/error.log || echo "No error log found"
          exit 1
      fi
      
      # Verify nginx is running and responding
      sleep 5
      if systemctl is-active --quiet nginx; then
          echo "✅ Nginx is running successfully"
          
          # Test if nginx is responding locally (using simple approach to avoid template conflicts)
          echo "Testing HTTPS response..."
          if curl -k -s -f https://localhost > /dev/null; then
              echo "✅ Nginx is responding to HTTPS requests"
          else
              echo "⚠️ Nginx may not be responding correctly to HTTPS"
          fi
          
          echo "Testing HTTP redirect..."
          if curl -s -I http://localhost | grep -q "301\|302"; then
              echo "✅ HTTP to HTTPS redirect is working"
          else
              echo "⚠️ HTTP redirect may not be working correctly"
          fi
      else
          echo "❌ Nginx failed to start properly"
          systemctl status nginx --no-pager -l
          exit 1
      fi
      
      echo "✅ Nginx setup completed successfully!"
    permissions: '0755'

runcmd:
  # Run the nginx setup script
  - /usr/local/bin/setup-nginx.sh
  
  # Enable firewall and allow only necessary ports
  - ufw --force enable
  - ufw allow 22/tcp
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  
  # Set up log rotation
  - systemctl enable logrotate
  
  # Final verification and status
  - echo "=== Final System Status ==="
  - systemctl status nginx --no-pager -l || true
  - nginx -t || true
  - curl -k -I https://localhost || true
  - curl -I http://localhost || true
  - echo "=== Setup Complete ==="