name: Azure Infrastructure and application deployment

on:
  push:
    branches: [ main, feature_dhruv ]
  pull_request:
    branches: [ main ]

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

jobs:
  terraform:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.terraform_output.outputs.public_ip }}
      resource_group: ${{ steps.terraform_output.outputs.resource_group }}
    
    # Only run if terraform files changed or on main branch
    if: |
      contains(github.event.head_commit.modified, 'terraform/') ||
      contains(github.event.head_commit.added, 'terraform/') ||
      github.ref_name == 'main' ||
      github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4
        terraform_wrapper: false
    
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub
    
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_SA }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=webapp-${{ env.TF_VAR_environment }}.tfstate"
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      run: terraform plan -var="environment=${{ env.TF_VAR_environment }}" -out=tfplan
      
    - name: Terraform Apply
      if: github.ref_name == 'main' && github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
    
    - name: Get Terraform Outputs
      id: terraform_output
      if: github.ref_name == 'main' && github.event_name == 'push'
      run: |
        echo "public_ip=$(terraform output -raw load_balancer_public_ip)" >> $GITHUB_OUTPUT
        echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  deploy-application:
    name: 'Deploy Web Application'
    runs-on: ubuntu-latest
    needs: terraform
    #if: github.ref_name == 'main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Update Web Content
      run: |
        # Get storage account details
        STORAGE_ACCOUNT=$(az storage account list \
          --resource-group ${{ needs.terraform.outputs.resource_group }} \
          --query "[0].name" -o tsv)
        
        STORAGE_KEY=$(az storage account keys list \
          --resource-group ${{ needs.terraform.outputs.resource_group }} \
          --account-name $STORAGE_ACCOUNT \
          --query "[0].value" -o tsv)
        
        # Upload updated web content
        az storage blob upload \
          --account-name $STORAGE_ACCOUNT \
          --account-key $STORAGE_KEY \
          --container-name web-content \
          --name index.html \
          --file web-app/index.html \
          --overwrite
    
    - name: Restart VM Scale Set Instances
      run: |
        # Get VM Scale Set name
        VMSS_NAME=$(az vmss list \
          --resource-group ${{ needs.terraform.outputs.resource_group }} \
          --query "[0].name" -o tsv)
        
        # Restart all instances to pick up new content
        az vmss restart \
          --resource-group ${{ needs.terraform.outputs.resource_group }} \
          --name $VMSS_NAME
    
    - name: Wait for Deployment
      run: |
        echo "Waiting for application to be ready..."
        sleep 60
        
        # Test if application is responding
        max_attempts=10
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f -s -k https://${{ needs.terraform.outputs.public_ip }} > /dev/null; then
            echo "‚úÖ Application is ready!"
            break
          else
            echo "‚è≥ Attempt $attempt/$max_attempts - Application not ready yet..."
            sleep 30
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "‚ùå Application failed to become ready"
          exit 1
        fi

  security-tests:
    name: 'Security Tests'
    runs-on: ubuntu-latest
    needs: [terraform, deploy-application]
    #if: github.ref_name == 'main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        pip install requests
    
    - name: Run Security Tests
      run: |
        python tests/security-tests.py ${{ needs.terraform.outputs.public_ip }}
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-test-results
        path: test-results.log

  notify:
    name: 'Notification'
    runs-on: ubuntu-latest
    needs: [terraform, deploy-application, security-tests]
    if: always() && github.ref_name == 'main' && github.event_name == 'push'
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "Environment: ${{ env.TF_VAR_environment }}"
        echo "Public IP: ${{ needs.terraform.outputs.public_ip }}"
        echo "Application URL: https://${{ needs.terraform.outputs.public_ip }}"
        echo "Resource Group: ${{ needs.terraform.outputs.resource_group }}"
        echo ""
        echo "Job Status:"
        echo "- Terraform: ${{ needs.terraform.result }}"
        echo "- Deploy App: ${{ needs.deploy-application.result }}"
        echo "- Security Tests: ${{ needs.security-tests.result }}"